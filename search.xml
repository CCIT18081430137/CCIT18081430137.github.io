<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>micro bit的温度服务及其中一个特性</title>
    <url>/2020/06/19/micro-bit%E7%9A%84%E6%B8%A9%E5%BA%A6%E6%9C%8D%E5%8A%A1%E5%8F%8A%E5%85%B6%E4%B8%AD%E4%B8%80%E4%B8%AA%E7%89%B9%E6%80%A7/</url>
    <content><![CDATA[<h4 id="一、如何查看温度服务以及特性的uuid号"><a href="#一、如何查看温度服务以及特性的uuid号" class="headerlink" title="一、如何查看温度服务以及特性的uuid号"></a>一、如何查看温度服务以及特性的uuid号</h4><p>在添加温度服务与它的一个特性之前，我们需要看温度服务与特性的uuid号<a href="https://lancaster-university.github.io/microbit-docs/resources/bluetooth/bluetooth_profile.html" target="_blank" rel="noopener">点击查看</a></p>
<p>我的uuid号如下图</p>
<p><img src="/assets/micro-bit%E7%9A%84%E6%B8%A9%E5%BA%A6%E6%9C%8D%E5%8A%A1%E5%8F%8A%E5%85%B6%E4%B8%AD%E4%B8%80%E4%B8%AA%E7%89%B9%E6%80%A7/wd1.png" alt="img"></p>
<h4 id="二、启动Chrome蓝牙插件，查看是否有温度服务"><a href="#二、启动Chrome蓝牙插件，查看是否有温度服务" class="headerlink" title="二、启动Chrome蓝牙插件，查看是否有温度服务"></a>二、启动Chrome蓝牙插件，查看是否有温度服务</h4><p>在Chrome输入<strong>chrome://bluetooth-internals</strong>，然后点击右上方的Start Scan,找到自己的bbc连接</p>
<p><img src="/assets/micro-bit%E7%9A%84%E6%B8%A9%E5%BA%A6%E6%9C%8D%E5%8A%A1%E5%8F%8A%E5%85%B6%E4%B8%AD%E4%B8%80%E4%B8%AA%E7%89%B9%E6%80%A7/wd2.png" alt="img"></p>
<p>连接成功后如图</p>
<p><img src="/assets/micro-bit%E7%9A%84%E6%B8%A9%E5%BA%A6%E6%9C%8D%E5%8A%A1%E5%8F%8A%E5%85%B6%E4%B8%AD%E4%B8%80%E4%B8%AA%E7%89%B9%E6%80%A7/wd3.png" alt="img"></p>
<p>当我们仔细观察后，会发现上图中并没有我们温度服务的uuid号，所以这个时候则需要修改bbc的程序。</p>
<h4 id="三、修改bbc程序"><a href="#三、修改bbc程序" class="headerlink" title="三、修改bbc程序"></a>三、修改bbc程序</h4><p>首先<a href="https://makecode.microbit.org/#" target="_blank" rel="noopener">点击进入</a>，然后点击编辑，修改.hex文件</p>
<p>切换到JavaScript格式，在代码最后添加bluetooth.startTemperatureService()</p>
<p><img src="/assets/micro-bit%E7%9A%84%E6%B8%A9%E5%BA%A6%E6%9C%8D%E5%8A%A1%E5%8F%8A%E5%85%B6%E4%B8%AD%E4%B8%80%E4%B8%AA%E7%89%B9%E6%80%A7/wd4.png" alt="img"></p>
<p>在切换回方块格式，会发现温度服务已经开启了,再点击下方的下载</p>
<p><img src="/assets/micro-bit%E7%9A%84%E6%B8%A9%E5%BA%A6%E6%9C%8D%E5%8A%A1%E5%8F%8A%E5%85%B6%E4%B8%AD%E4%B8%80%E4%B8%AA%E7%89%B9%E6%80%A7/wd5.png" alt="img"></p>
<p>然后将下载下来的.hex文件拖拽到bbc的盘符里即可</p>
<p>最后在重启Chrome蓝牙插件，在连接bbc就会发现多处一个服务,与温度服务的uuid号相同</p>
<p><img src="/assets/micro-bit%E7%9A%84%E6%B8%A9%E5%BA%A6%E6%9C%8D%E5%8A%A1%E5%8F%8A%E5%85%B6%E4%B8%AD%E4%B8%80%E4%B8%AA%E7%89%B9%E6%80%A7/wd6.png" alt="img"></p>
<h4 id="四、修改电脑端源码"><a href="#四、修改电脑端源码" class="headerlink" title="四、修改电脑端源码"></a>四、修改电脑端源码</h4><p>在脚本script中加入以下语句</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// presence of services and characteristics </span></span><br><span class="line"><span class="keyword">var</span> has_temperature_service =<span class="literal">false</span>;    <span class="comment">//温度</span></span><br><span class="line"><span class="keyword">var</span> has_tem_temperature = <span class="literal">false</span>;  </span><br><span class="line"><span class="comment">// service UUIDs </span></span><br><span class="line">TEMPERATURE_SERVICE =<span class="string">'e95d6100-251d-470a-a062-fa1922dfa9a8'</span>; </span><br><span class="line"><span class="comment">// characteristic UUIDs </span></span><br><span class="line">TEM_TEMPERATURE =<span class="string">'e95d9250-251d-470a-a062-fa1922dfa9a8'</span>;</span><br><span class="line"> <span class="comment">// cached characteristics var accelerometer_data; </span></span><br><span class="line"> <span class="keyword">var</span> tem_temperature;</span><br></pre></td></tr></table></figure>

<p>然后改变discoverSvcsAndChars()函数</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">discoverSvcsAndChars</span>(<span class="params"></span>)    //在第5课基础上添加的函数</span></span><br><span class="line"><span class="function">       </span>&#123;  </span><br><span class="line">           <span class="built_in">console</span>.log(<span class="string">"discoverSvcsAndChars server="</span> + connected_server); </span><br><span class="line">           connected_server.getPrimaryServices()</span><br><span class="line">           .then(<span class="function"><span class="params">services</span> =&gt;</span> </span><br><span class="line">           &#123;    </span><br><span class="line">                   has_accelerometer_service = <span class="literal">false</span>;    </span><br><span class="line">                   has_led_service = <span class="literal">false</span>;    </span><br><span class="line">                   has_device_information_service = <span class="literal">false</span>; </span><br><span class="line">                   has_temperature_service=<span class="literal">false</span>;  <span class="comment">//温度</span></span><br><span class="line"></span><br><span class="line">                   services_discovered = <span class="number">0</span>;    </span><br><span class="line">                   service_count = services.length;    </span><br><span class="line">                   <span class="built_in">console</span>.log(<span class="string">"Got "</span> + service_count + <span class="string">" services"</span>); </span><br><span class="line">       </span><br><span class="line">                   services.forEach(<span class="function"><span class="params">service</span> =&gt;</span> </span><br><span class="line">                   &#123;     </span><br><span class="line">                       <span class="keyword">if</span> (service.uuid == ACCELEROMETER_SERVICE)</span><br><span class="line">                       &#123;      </span><br><span class="line">                           has_accelerometer_service = <span class="literal">true</span>;    </span><br><span class="line">                       &#125;   </span><br><span class="line">                       <span class="keyword">if</span> (service.uuid == LED_SERVICE) </span><br><span class="line">                       &#123;      </span><br><span class="line">                           has_led_service = <span class="literal">true</span>;     </span><br><span class="line">                       &#125;     </span><br><span class="line">                      <span class="keyword">if</span> (service.uuid == DEVICE_INFORMATION_SERVICE) </span><br><span class="line">                       &#123;      </span><br><span class="line">                           has_device_information_service = <span class="literal">true</span>;     </span><br><span class="line">                       &#125; </span><br><span class="line">                       <span class="keyword">if</span> (service.uuid == TEMPERATURE_SERVICE) <span class="comment">//温度</span></span><br><span class="line">                       &#123;      </span><br><span class="line">                           has_temperature_service = <span class="literal">true</span>;     </span><br><span class="line">                       &#125;        </span><br><span class="line">                       <span class="built_in">console</span>.log(<span class="string">'Getting Characteristics for service '</span> + service.uuid);     </span><br><span class="line">                       service.getCharacteristics()</span><br><span class="line">                       .then(<span class="function"><span class="params">characteristics</span> =&gt;</span> </span><br><span class="line">                       &#123;      </span><br><span class="line">                           <span class="built_in">console</span>.log(<span class="string">'&gt; Service: '</span> + service.uuid);      </span><br><span class="line">                           services_discovered++;     </span><br><span class="line">                           characteristics_discovered = <span class="number">0</span>;      </span><br><span class="line">                           characteristic_count = characteristics.length;      </span><br><span class="line">                           characteristics.forEach(<span class="function"><span class="params">characteristic</span> =&gt;</span> </span><br><span class="line">                           &#123;       </span><br><span class="line">                               characteristics_discovered++;       </span><br><span class="line">                               <span class="built_in">console</span>.log(<span class="string">'&gt;&gt; Characteristic: '</span> + characteristic.uuid);       </span><br><span class="line">                               <span class="keyword">if</span> (characteristic.uuid == ACCELEROMETER_DATA)</span><br><span class="line">                               &#123;        </span><br><span class="line">                                   accelerometer_data = characteristic;        </span><br><span class="line">                                   has_accelerometer_data = <span class="literal">true</span>;       </span><br><span class="line">                               &#125;      </span><br><span class="line">                               <span class="keyword">if</span> (characteristic.uuid == LED_MATRIX_STATE) </span><br><span class="line">                               &#123;        </span><br><span class="line">                                   led_matrix_state = characteristic;        </span><br><span class="line">                                   has_led_matrix_state = <span class="literal">true</span>;       </span><br><span class="line">                               &#125;       </span><br><span class="line">                               <span class="keyword">if</span> (characteristic.uuid == MODEL_NUMBER_STRING) </span><br><span class="line">                               &#123;        </span><br><span class="line">                                   model_number_string = characteristic;        </span><br><span class="line">                                   has_model_name_string = <span class="literal">true</span>;       </span><br><span class="line">                               &#125;</span><br><span class="line">                               <span class="keyword">if</span>(characteristic.uuid == TEM_TEMPERATURE)  <span class="comment">//温度</span></span><br><span class="line">                               &#123;</span><br><span class="line">                                   tem_temperature = characteristic; </span><br><span class="line">                                   has_tem_temperature = <span class="literal">true</span>;</span><br><span class="line">                               &#125;     </span><br><span class="line">                               <span class="keyword">if</span> (services_discovered == service_count &amp;&amp; characteristics_discovered == characteristic_count) </span><br><span class="line">                               &#123;        </span><br><span class="line">                                   <span class="built_in">console</span>.log(<span class="string">"FINISHED DISCOVERY"</span>); </span><br><span class="line">                                   setDiscoveryStatus(<span class="literal">true</span>);       </span><br><span class="line">                                   <span class="comment">//setDiscoveryStatus(true);                  </span></span><br><span class="line">                               &#125;    </span><br><span class="line">                           &#125;);     </span><br><span class="line">                       &#125;);    </span><br><span class="line">                   &#125;);  </span><br><span class="line">           &#125;);</span><br><span class="line">       &#125;</span><br></pre></td></tr></table></figure>

<p>最后改discoverDevices()函数把原来的(发现所有周边蓝牙设备)这句代码加上温度服务</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> options = &#123;<span class="attr">acceptAllDevices</span>:<span class="literal">true</span>,</span><br><span class="line">                optionalServices: [DEVICE_INFORMATION_SERVICE, ACCELEROMETER_SERVICE, LED_SERVICE,TEMPERATURE_SERVICE]  </span><br><span class="line">            &#125;        <span class="comment">//发现所有周边蓝牙设备</span></span><br></pre></td></tr></table></figure>

<h4 id="五、连接bbc"><a href="#五、连接bbc" class="headerlink" title="五、连接bbc"></a>五、连接bbc</h4><p>将.html文件用Chrome打开，连接bbc，按F12，查看BBC板的情况，你会发现会多出一个服务和相对应的特性，这样温度的服务和其中的一个特性就添加成功了</p>
]]></content>
  </entry>
  <entry>
    <title>网页如何显示连接蓝牙设备</title>
    <url>/2020/06/16/%E7%BD%91%E9%A1%B5%E5%A6%82%E4%BD%95%E6%98%BE%E7%A4%BA%E8%BF%9E%E6%8E%A5%E8%93%9D%E7%89%99%E8%AE%BE%E5%A4%87/</url>
    <content><![CDATA[<h6 id="本篇文章里使用的设备为Micro-bit-利用它来学习如何连接蓝牙设备。"><a href="#本篇文章里使用的设备为Micro-bit-利用它来学习如何连接蓝牙设备。" class="headerlink" title="本篇文章里使用的设备为Micro:bit,利用它来学习如何连接蓝牙设备。"></a>本篇文章里使用的设备为Micro:bit,利用它来学习如何连接蓝牙设备。</h6><blockquote>
<p>Micro:bit是一款由英国广播电视公司（BBC）推出的专为青少年编程教育设计的<a href="https://baike.sogou.com/lemma/ShowInnerLink.htm?lemmaId=546922&ss_c=ssc.citiao.link" target="_blank" rel="noopener">微型电脑</a><a href="https://baike.sogou.com/lemma/ShowInnerLink.htm?lemmaId=7836650&ss_c=ssc.citiao.link" target="_blank" rel="noopener">开发板</a>。2016年3月-6月，micro:bit在英国全线铺开，BBC在线上线下配套了大量的项目教程资源和活动。BBC希望通过micro:bit驱动青少年参与到创造性的硬件制作和软件编程中去，而不是每天沉浸在各式的娱乐和消费中。</p>
</blockquote>
<h4 id="一、测试Micro-bit在本机上是否连接成功"><a href="#一、测试Micro-bit在本机上是否连接成功" class="headerlink" title="一、测试Micro:bit在本机上是否连接成功"></a>一、测试Micro:bit在本机上是否连接成功</h4><ol>
<li><p>先将板子通过USB口连接到电脑上，此时我们会发现电脑里会多出一个盘符（如图）。</p>
<p><img src="/assets/%E7%BD%91%E9%A1%B5%E5%A6%82%E4%BD%95%E6%98%BE%E7%A4%BA%E8%BF%9E%E6%8E%A5%E8%93%9D%E7%89%99%E8%AE%BE%E5%A4%87/tp1.png" alt="img"></p>
</li>
<li><p>到官网去下载我们需要的测试程序。<a href="https://makecode.microbit.org/#" target="_blank" rel="noopener">https://makecode.microbit.org/#</a></p>
<p><img src="/assets/%E7%BD%91%E9%A1%B5%E5%A6%82%E4%BD%95%E6%98%BE%E7%A4%BA%E8%BF%9E%E6%8E%A5%E8%93%9D%E7%89%99%E8%AE%BE%E5%A4%87/tp2.png" alt="img"></p>
</li>
</ol>
<p>下载完成后，我们将程序拖入多出的盘符中。</p>
<p><img src="/assets/%E7%BD%91%E9%A1%B5%E5%A6%82%E4%BD%95%E6%98%BE%E7%A4%BA%E8%BF%9E%E6%8E%A5%E8%93%9D%E7%89%99%E8%AE%BE%E5%A4%87/tp3.png" alt="img"></p>
<p>完成后我们会发现Micro:bit上会显示Hi!内容。</p>
<h4 id="二、通过蓝牙连接Micro-bit"><a href="#二、通过蓝牙连接Micro-bit" class="headerlink" title="二、通过蓝牙连接Micro:bit"></a>二、通过蓝牙连接Micro:bit</h4><p>以下为程序代码</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;head&gt;</span><br><span class="line">        &lt;script&gt;</span><br><span class="line">            var selected_device;           &#x2F;&#x2F; 保存用户选择的蓝牙设备</span><br><span class="line">            var connected_server;           &#x2F;&#x2F;在第二课基础上添加的变量，保存用户连接的蓝牙设备</span><br><span class="line">            var connected&#x3D;false;            &#x2F;&#x2F;在第三课基础上添加的变量，保存电脑蓝牙的当前连接设备</span><br><span class="line">            function discoverDevices()</span><br><span class="line">            &#123;</span><br><span class="line">                console.log(&quot;discoverDevices&quot;);     &#x2F;&#x2F;consol.log 控制台打印输出</span><br><span class="line">                var options &#x3D; &#123;acceptAllDevices:true&#125;        &#x2F;&#x2F;发现所有周边蓝牙设备</span><br><span class="line">                navigator.bluetooth.requestDevice(options)      &#x2F;&#x2F;Navigator对象，包含有关游览器的信息</span><br><span class="line">                .then(device &#x3D;&gt; &#123;</span><br><span class="line">                    console.log(&#39;&gt; Name:        &#39; + device.name);</span><br><span class="line">                    console.log(&#39;&gt; Id:          &#39; + device.id);</span><br><span class="line">                    console.log(&#39;&gt; Connected:   &#39; + device.gatt.connected);</span><br><span class="line">                    selected_device &#x3D; device;</span><br><span class="line">                    console.log(selected_device);</span><br><span class="line">                    connect();  </span><br><span class="line">                &#125;)</span><br><span class="line">                .catch(error &#x3D;&gt;&#123;</span><br><span class="line">                    alert(&#39;ERROR:&#39; +error);</span><br><span class="line">                    console.log(&#39;ERROR:&#39; +error);</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            function connect()</span><br><span class="line">            &#123;</span><br><span class="line">                console.log(&quot;connecting&quot;);</span><br><span class="line">                selected_device.gatt.connect()</span><br><span class="line">                .then(</span><br><span class="line">                    function(server)                            &#x2F;&#x2F;表示连接成功</span><br><span class="line">                    &#123;</span><br><span class="line">                        console.log(&quot;Connected to&quot; + server.device.id);</span><br><span class="line">                        console.log(&quot;Connected&#x3D;&quot; + server.connected);</span><br><span class="line">                        connected_server &#x3D; server;</span><br><span class="line">                        setConnectedStatus(true);</span><br><span class="line"></span><br><span class="line">                    &#125;,</span><br><span class="line">                    function(error)                              &#x2F;&#x2F;表示连接失败</span><br><span class="line">                    &#123;</span><br><span class="line">                        console.log(&quot;ERROR:could not connct-&quot; + error);</span><br><span class="line">                        alert(&quot;ERROR:could not connct-&quot; + error);</span><br><span class="line">                        setConnectedStatus(false);</span><br><span class="line"></span><br><span class="line">                    &#125;</span><br><span class="line">                );</span><br><span class="line">            &#125;</span><br><span class="line">            function setConnectedStatus(status)</span><br><span class="line">            &#123;</span><br><span class="line">                connected&#x3D;status;</span><br><span class="line">                document.getElementById(&#39;status_connected&#39;).innerHTML&#x3D;status;</span><br><span class="line">                if(status&#x3D;&#x3D;true)</span><br><span class="line">                &#123;</span><br><span class="line">                    document.getElementById(&#39;btn_scan&#39;).innerHTML&#x3D;&quot;Disconnect&quot;;</span><br><span class="line">                &#125;</span><br><span class="line">                else</span><br><span class="line">                &#123;</span><br><span class="line">                    document.getElementById(&#39;btn_scan&#39;).innerHTML&#x3D;&quot;Discover Devices&quot;;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &lt;&#x2F;script&gt;</span><br><span class="line">    &lt;&#x2F;head&gt;</span><br><span class="line">    &lt;body&gt;       </span><br><span class="line">        &lt;h2&gt;</span><br><span class="line">            Status  &lt;!-- 显示蓝牙状态--&gt;</span><br><span class="line">        &lt;&#x2F;h2&gt;</span><br><span class="line">        &lt;table border&#x3D;&quot;1&quot;&gt;</span><br><span class="line">            &lt;tr&gt;</span><br><span class="line">                &lt;td&gt;    &lt;b&gt;Connected&lt;&#x2F;b&gt;    &lt;&#x2F;td&gt;</span><br><span class="line">            &lt;&#x2F;tr&gt;</span><br><span class="line">            &lt;tr&gt;</span><br><span class="line">                &lt;td id&#x3D;&quot;status_connected&quot;&gt;False&lt;&#x2F;td&gt;</span><br><span class="line">            &lt;&#x2F;tr&gt;</span><br><span class="line">        &lt;&#x2F;table&gt; </span><br><span class="line">        &lt;h2&gt;Device Discovery &lt;&#x2F;h2&gt;     &lt;!-- 扫描&#x2F;发现蓝牙设备 --&gt;</span><br><span class="line">        &lt;button id&#x3D;&quot;btn_scan&quot; onclick&#x3D;&quot;discoverDevices()&quot;&gt;</span><br><span class="line">            Start scan</span><br><span class="line">        &lt;&#x2F;button&gt;</span><br><span class="line">    &lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>

<p>我们可以在用Chrome里打开网址，测试</p>
<p><img src="/assets/%E7%BD%91%E9%A1%B5%E5%A6%82%E4%BD%95%E6%98%BE%E7%A4%BA%E8%BF%9E%E6%8E%A5%E8%93%9D%E7%89%99%E8%AE%BE%E5%A4%87/tp4.png" alt="img"></p>
<p>配对成功后Micro:bit会出现C的样子，如图</p>
<p><img src="/assets/%E7%BD%91%E9%A1%B5%E5%A6%82%E4%BD%95%E6%98%BE%E7%A4%BA%E8%BF%9E%E6%8E%A5%E8%93%9D%E7%89%99%E8%AE%BE%E5%A4%87/tp5.png" alt="img"></p>
<p>到这里，我们就完成啦！</p>
]]></content>
  </entry>
  <entry>
    <title>网页蓝牙开发</title>
    <url>/2020/06/16/%E7%BD%91%E9%A1%B5%E8%93%9D%E7%89%99%E5%BC%80%E5%8F%91/</url>
    <content><![CDATA[<h5 id="本课程主要讲解如何实现网页蓝牙的开发。"><a href="#本课程主要讲解如何实现网页蓝牙的开发。" class="headerlink" title="本课程主要讲解如何实现网页蓝牙的开发。"></a>本课程主要讲解如何实现网页蓝牙的开发。</h5><h6 id="首先我们可以先来了解一下蓝牙的背景："><a href="#首先我们可以先来了解一下蓝牙的背景：" class="headerlink" title="首先我们可以先来了解一下蓝牙的背景："></a>首先我们可以先来了解一下蓝牙的背景：</h6><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">蓝牙是一种低成本大容量的短距离无线通信规范。蓝牙笔记本电脑，就是具有蓝牙无线通信功能的笔记本电脑。蓝牙这个名字还有一段传奇故事呢。公元10世纪，北欧诸侯争霸，丹麦国王挺身而出，在他的不懈努力下，血腥的战争被制止了，各方都坐到了谈判桌前。一千年后的今天，当新的无线通信规范出台时，人们又用蓝牙来为它命名。1995年，爱立信公司最先提出蓝牙概念。蓝牙技术不仅仅运用于电脑，像移动电话、数字相机、摄像机、打印机、传真机、家用 电器等许许多多电子设备都可以采用蓝牙技术，实现无线联通，而不必拖一条尾巴（连接线）。随着蓝牙技术的普及，家庭装修时不再为电器的布线而烦恼；使用家用 电器时，不必为一大堆遥控器而头痛，一部手机或是一把汽车钥匙就能一切搞定；出门在外，公司的工作安排和家里亲人的画面可以随时随地得到；打卡、缴费不用排队，从缴费点附近经过，不必进门就可以轻松完成。蓝牙技术的广泛应用将使我们的生活无比轻松。Car100内置电池，但并没有配置特别的充电器。三、刚开始佩戴会有些不习惯，可能是使用者把耳塞塞得太紧，弄得好像隔着什么，听不清周围的声音。蓝牙（Bluetooth）是一种低功率短距离的无线连接技术标准的代称，蓝牙一词取自一位在公元10世纪统一了丹麦的国王，哈拉德二世、（Harald）的绰号，即蓝牙（Bluetooth）。蓝牙技术的最初倡导者是五家世界著名的计算机和通信公司：爱立信Ericsson, 国际商用机器IBM, 英特尔Intel, 诺基亚Nokia, 和东芝Toshiba。其目标是实现最高数据传输速度1Mbps(有效传输速度为721kbps)、最大传输距离达10米，用户不必经过允许便可利用2.4GHz的ISM(工业、科学、医学)频带，在其上设立79个带宽为1MHz的信道，用每秒钟切换1600次的频率、滚齿(hobbing)方式的频谱扩散技术来实现电波的收发。遵从这一规格的移动电话和笔记本电脑将于1999年底或2000年初上市。由此可见蓝牙早期发展阶段植入成本还是比较高的。</span><br></pre></td></tr></table></figure>

<h6 id="接下来，我们做环境准备"><a href="#接下来，我们做环境准备" class="headerlink" title="接下来，我们做环境准备"></a>接下来，我们做环境准备</h6><blockquote>
<p>确认本机上是否安装了蓝牙</p>
<p>检查本机系统以及chrome浏览器的版本</p>
<p>下载固件至开发板</p>
</blockquote>
<p>做完这些准备之后，就可以进行下一步连接设备。</p>
]]></content>
  </entry>
  <entry>
    <title>hexo的美化</title>
    <url>/2020/03/03/hexo%E7%9A%84%E7%BE%8E%E5%8C%96/</url>
    <content><![CDATA[<p><code>Biubiubiu ❥(^_-)</code></p>
<p><code>砰砰砰 ❤</code></p>
<p>美化开始！冲鸭</p>
<h3 id="一、安装主题插件"><a href="#一、安装主题插件" class="headerlink" title="一、安装主题插件"></a>一、安装主题插件</h3><p>1.这里我选用的是博客<strong>根目录</strong>打开命令行</p>
<p>①用5.1版本输入命令</p>
<p><strong>git clone <a href="https://github.com/iissnan/hexo-theme-next" target="_blank" rel="noopener">https://github.com/iissnan/hexo-theme-next</a> themes/next</strong></p>
<p>②6.5版本输入命令</p>
<p><strong>git clone <a href="https://github.com/theme-next/hexo-theme-next" target="_blank" rel="noopener">https://github.com/theme-next/hexo-theme-next</a> themes/next</strong></p>
<p>2.安装完成后，打开<strong>博客配置文件</strong>修改最上方的<strong>theme</strong>项为<strong>next</strong>。</p>
<p>修改完成后命令行输入<code>hexo s</code>本地运行一下看是否生效。</p>
<p><code>Tips:</code>博客配置文件是指博客根目录下的<strong>_config.yml</strong>文件，主题配置文件是指/themes/主题名/路径下的<strong>_config.yml</strong>文件。</p>
<p>3.修改语言</p>
<p>修改<strong>博客配置文件</strong>下的<strong>language</strong>项为<strong>zh-CN</strong>。</p>
<p><code>Tips:</code>看一下主题文件夹内的<strong>languange</strong>文件夹中中文的配置文件叫什么名字，Next主题有些版本的叫<strong>zh-Hans</strong>那这里就填<strong>zh-Hans</strong>，Next最新版本中用的是<strong>zh-CN</strong>，故这里填写<strong>zh-CN</strong>。</p>
<p>4.修改主题风格</p>
<p>Next自带四种主题风格，可以在<strong>主题配置文件</strong>搜索Scheme项，将需要的风格前的#去掉，注意只能开启一个风格。</p>
<p>此时执行hexo clean,g,d就会发现主题变了。</p>
<h3 id="二、插入图片"><a href="#二、插入图片" class="headerlink" title="二、插入图片"></a>二、插入图片</h3><p>1.首先在 <strong>hexo &gt; source</strong>目录下建一个文件夹叫assets，用来保存博客中的图片。</p>
<p>然后打开Typora的 <strong>文件 &gt; 偏好设置</strong>，进行如下设置。</p>
<p><img src="/assets/hexo%E7%9A%84%E7%BE%8E%E5%8C%96/mh1.png" alt="img"></p>
<p>这样的话所有的博客中的图片都将会保存到 <strong>/source/assets/该博客md文件名/图片名称</strong>。</p>
<p>然后在typora菜单栏点击 <strong>格式-&gt;图像-&gt;设置图片根目录</strong>，将<strong>hexo/source</strong>作为其根目录即可。</p>
<p><code>Tips:</code><strong>一定要先设置了图片根目录后再插入图片，否则图片路径会不正确喔！</strong></p>
<h3 id="三、添加评论功能"><a href="#三、添加评论功能" class="headerlink" title="三、添加评论功能"></a>三、添加评论功能</h3><p>PS：这里我说的是友言评论</p>
<p>友言的添加方法也极其简单：在友言官网注册账号，得到用户ID<br>将<strong>友言ID</strong>复制到NexT主题的配置文件<strong>_config</strong>中，搜索youyan，将<strong>youyan_uid</strong>前面的#号去掉，将id填写到<strong>youyan_uid：</strong>后面。<br>部署到你的网站。<br>PS：部署成功后可能不会立即显示你的网站，这个时候你去你的网站评论一下就行了。</p>
<h3 id="四、添加背景音乐"><a href="#四、添加背景音乐" class="headerlink" title="四、添加背景音乐"></a>四、添加背景音乐</h3><p>1.进入网易云，找到自己喜欢的歌单，然后点击<strong>生成外链播放器</strong>，但是由于现在网易云的版权受限保护，会出现这样的提示</p>
<p><img src="/assets/hexo%E7%9A%84%E7%BE%8E%E5%8C%96/mh2.png" alt="img"></p>
<p>此时我们可以把鼠标放在<strong>生成外链播放器</strong>上，右击选择检查按钮</p>
<p><img src="/assets/hexo%E7%9A%84%E7%BE%8E%E5%8C%96/mh3.png" alt="img"></p>
<p>将此代码复制出来，选取这一部分<strong>/outchain/0/2578068117/</strong></p>
<p><img src="/assets/hexo%E7%9A%84%E7%BE%8E%E5%8C%96/mh4.png" alt="img"></p>
<p>然后浏览，会发现此时已经生成了外链，并且将最下方的代码复制</p>
<p><img src="/assets/hexo%E7%9A%84%E7%BE%8E%E5%8C%96/mh5.png" alt="img"></p>
<p>粘贴到<strong>blog/themes/next/layout/_macro/sidebar.swig</strong>文件下</p>
<p><img src="/assets/hexo%E7%9A%84%E7%BE%8E%E5%8C%96/mh6.png" alt="img"></p>
<p>然后保存即可，在执行三步骤，就可以看到这样有音乐播放器了。</p>
<h3 id="五、添加动态背景"><a href="#五、添加动态背景" class="headerlink" title="五、添加动态背景"></a>五、添加动态背景</h3><p>在主题配置文件中找到<strong>canvas_nest: false</strong>，把它改为<strong>canvas_nest: true</strong>即可。</p>
<h3 id="六、绑定域名"><a href="#六、绑定域名" class="headerlink" title="六、绑定域名"></a>六、绑定域名</h3><p><strong>1.购买域名</strong></p>
<p>首先在阿里云(<a href="https://wanwang.aliyun.com/" target="_blank" rel="noopener">https://wanwang.aliyun.com/</a>)上买一个域名,挑选自己喜欢的，购买过程这里就不讲解了，大家根据自己的需求就好。这里我买的是.top为后缀的。(因为它是比较便宜的而且又好看的一个域名<code>(#^.^#)</code>)</p>
<p><strong>2.域名解析</strong></p>
<p>购买完成后，我们登陆并且进入阿里云官网的控制台在列表里是可以查看到自己购买的域名的。</p>
<p><img src="/assets/hexo%E7%9A%84%E7%BE%8E%E5%8C%96/mh7.png" alt="img"></p>
<p>然后我们点击这个域名最右边的解析，进入云解析控制台。</p>
<p>然后按照下面进行设置</p>
<p><img src="/assets/hexo%E7%9A%84%E7%BE%8E%E5%8C%96/mh8.png" alt="img"></p>
<p><code>注：</code>由于这里我已经解析完成了，所以我的页面看不到如图</p>
<p><img src="/assets/hexo%E7%9A%84%E7%BE%8E%E5%8C%96/mh9.png" alt="img"></p>
<p>我们设置完成后点击添加解析按钮。</p>
<p><strong>3.完成映射</strong></p>
<p>在source目录下新建一个CNAME的文件，记住它没有任何后缀名，在其中添加你的域名(注意：没有http://，没有www)。例如我的：<strong>cydbiubiubiu.top</strong></p>
<p>然后保存发布。执行三步骤后，再打开你的新域名，就可以看到效果啦！</p>
<p><img src="/assets/hexo%E7%9A%84%E7%BE%8E%E5%8C%96/mh10.png" alt="img"></p>
]]></content>
  </entry>
  <entry>
    <title>hexo搭建</title>
    <url>/2020/03/02/hexo%E6%90%AD%E5%BB%BA/</url>
    <content><![CDATA[<h1 id="HEXO的搭建"><a href="#HEXO的搭建" class="headerlink" title="HEXO的搭建"></a>HEXO的搭建</h1><h4 id="一、配置hexo的环境"><a href="#一、配置hexo的环境" class="headerlink" title="一、配置hexo的环境"></a>一、配置hexo的环境</h4><p>1.我们需安装<a href="https://nodejs.org/en/download/" target="_blank" rel="noopener">Node.js</a>和<a href="https://git-scm.com/" target="_blank" rel="noopener">Git</a>两个软件</p>
<p>①点击安装<a href="https://nodejs.org/en/download/" target="_blank" rel="noopener">Node.js</a>，最好选择10以上的版本，完成后我们在cmd中输入如下指令<img src="/assets/hexo搭建/4.png" alt="img" style="zoom:150%;" /></p>
<p>显示Node.js的版本号，即安装成功。</p>
<p><code>Tips：</code>新版的Node.js已经集成了npm，所以Node.js安装好后npm也一并安装好了。npm全称Node Package Manager，是运行在 Node.js 上的默认包管理工具。</p>
<p>所以我们输入如下指令:<img src="/assets/hexo搭建/5.png" alt="img" style="zoom:150%;" /></p>
<p>显示npm版本号，即安装成功。</p>
<p>②点击安装<a href="https://git-scm.com/" target="_blank" rel="noopener">Git</a>，选择最新版本即可，完成后再cmd中输入指令<img src="/assets/hexo搭建/6.png" alt="img" style="zoom:150%;" /></p>
<p>显示Git的各种用法，即安装成功。</p>
<h4 id="二、安装Hexo"><a href="#二、安装Hexo" class="headerlink" title="二、安装Hexo"></a>二、安装Hexo</h4><p>1.首先在cmd输入如下指令<img src="/assets/hexo搭建/7.png" alt="img" style="zoom:150%;" /></p>
<p>结果如显示hexo-cli的版本信息，即安装成功。可以用hexo -v指令来核查。</p>
<p>2.依次执行下面两条语句（建议在Git Bash下执行，我觉得比cmd好点）。</p>
<p><img src="/assets/hexo%E6%90%AD%E5%BB%BA/8.png" alt="img"></p>
<p><code>Tips：</code>md是创建文件夹，cd是进入xx文件夹。所以md blog是在当前路径下</p>
<p>创建一个名为blog的文件夹，用来保存你的各种博客资源及博文。</p>
<p>3.初始化hexo博客，执行如下指令</p>
<p><img src="/assets/hexo%E6%90%AD%E5%BB%BA/9.png" alt="img"></p>
<p>若实验结果出现“Start blogging with Hexo!”字符串，则表示初始化成功且可以开始写博客了。</p>
<h4 id="三、本地博客预览"><a href="#三、本地博客预览" class="headerlink" title="三、本地博客预览"></a>三、本地博客预览</h4><p>1.在命令窗口下输入：hexo s</p>
<p>当执行结果出现”Hexo is running at <code>http://localhost:4000/</code>字符串，则表示启动成功。然后在浏览器中输入上述网址即可。</p>
<h4 id="四、新建一篇博文"><a href="#四、新建一篇博文" class="headerlink" title="四、新建一篇博文"></a>四、新建一篇博文</h4><p>在此之前，我们需要一个Markdown的开发工具，建议大家使用本地开发工具的<a href="https://www.typora.io/" target="_blank" rel="noopener">Typora</a>。</p>
<p>1.执行以下语句</p>
<p><img src="/assets/hexo%E6%90%AD%E5%BB%BA/10.png" alt="img"></p>
<p><code>Tips：</code>双引号里可以用自己的博文名字替代。</p>
<p>执行完毕后，会在_posts下新生成一篇名为“filename”的文章。</p>
<p>2.我们在_posts中打开这篇文章，用Typora打开。然后在里面输入你想要的内容。</p>
<p><code>Tips:</code>附上一个<a href="https://www.runoob.com/markdown/md-link.html" target="_blank" rel="noopener">Markdown教程</a>。</p>
<h4 id="五、本地查看新博文"><a href="#五、本地查看新博文" class="headerlink" title="五、本地查看新博文"></a>五、本地查看新博文</h4><p>按照如下三步骤：</p>
<p>1.清除旧数据</p>
<p><img src="/assets/hexo%E6%90%AD%E5%BB%BA/11.png" alt="img"></p>
<p>2.生成新数据</p>
<p><img src="/assets/hexo%E6%90%AD%E5%BB%BA/12.png" alt="img"></p>
<p>若实验结果出现连续出现<strong>Generated:</strong>字符串，则表示执行成功。</p>
<p>3.启动Hexo</p>
<p><img src="/assets/hexo%E6%90%AD%E5%BB%BA/13.png" alt="img"></p>
<p>当执行结果出现”Hexo is running at <strong><a href="http://localhost:4000/" target="_blank" rel="noopener">http://localhost:4000/</a></strong>字符串，则表示启动成功。然后在浏览器中输入上述网址即可。如果看到了新页面，则表示成功。</p>
<h4 id="六、将hexo上传至Github"><a href="#六、将hexo上传至Github" class="headerlink" title="六、将hexo上传至Github"></a>六、将hexo上传至Github</h4><p>1.首先注册Github</p>
<p>2.新建仓库(Repository)</p>
<p><code>Tips:</code>注意仓库名称必须写为<strong>username.github.io</strong> 其中<strong>username</strong>是你注册Github使用的用户名。</p>
<p>3.进入仓库，点击<strong>Settings</strong></p>
<p>如果发现Github Pages这一部分有<strong>Your site is published at <a href="https://username.github.io" target="_blank" rel="noopener">https://username.github.io</a></strong>字样，则表明仓库具备了网页展示功能。</p>
<h4 id="七、绑定Hexo和Github"><a href="#七、绑定Hexo和Github" class="headerlink" title="七、绑定Hexo和Github"></a>七、绑定Hexo和Github</h4><p>1.打开<strong>blog</strong>下的 <code>_config.yml</code>(本地站点配置文件），在末尾修改为</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">deploy:  </span><br><span class="line">      type:  git</span><br><span class="line">      repo: git@github.com:username&#x2F;username.github.io.git</span><br><span class="line">      branch:  master</span><br></pre></td></tr></table></figure>
<p>2.安装绑定hexo和git的工具<br><code>npm install hexo-deployer-git –save</code><br>如最后看到版本号，即安装成功。</p>
<h4 id="八、上传Hexo"><a href="#八、上传Hexo" class="headerlink" title="八、上传Hexo"></a>八、上传Hexo</h4><p>1.配置SSH密钥</p>
<p>①打开<strong>Git Bash</strong>查看电脑上是否已经存在SSH密钥：<br>输入 <strong>cd ~/.ssh</strong><br><img src="/assets/hexo%E6%90%AD%E5%BB%BA/14.png" alt="img"></p>
<p>若如上图显示无法找到该文件则要创建新的ssh key;</p>
<p>②创建新的SSH密钥</p>
<p>输入*<em>ssh-keygen -t rsa -C “<a href="mailto:youremail@youremail.com">youremail@youremail.com</a>“ *</em></p>
<p>然后会在.ssh目录产生两个文件：id_rsa和id_rsa.pub，用记事本打开id_rsa.pub文件，复制或者直接执行<strong>cat ~/.ssh/id_rsa.pub</strong>查看。</p>
<p>2.复制ssh key到github</p>
<p>进入github官网，在右上角进去Settings，进入SSH and GPG keys,添加密钥，将复制的内容粘贴进去。</p>
<p><img src="/assets/hexo%E6%90%AD%E5%BB%BA/15.png" alt="img"></p>
<p>3.测试 ssh 链接 github</p>
<p>然后可以输入<strong>ssh -T <a href="mailto:git@github.com">git@github.com</a></strong>来测试，当结果出现Successfully就表示可以了。</p>
<p>4.设置自己的git信息</p>
<p>输入<strong>git config –global user.name “Firstname Lastname”</strong> （此处name可修改不是用于登录github的登录名，是你刚刚设置的，别搞混了）</p>
<p><strong>git config –global user.email “<a href="mailto:your_email@youremail.com">your_email@youremail.com</a>“</strong>设置自己的git信息即完成安装和设置，可以输入git config –list查看自己的git信息。</p>
<p><img src="/assets/hexo%E6%90%AD%E5%BB%BA/16.png" alt="img"></p>
<p><code>Tips：</code>如果需要修改的话，可以用：</p>
<p><strong>git config –global user.name “你的名字” **<br>**git config –global user.email “你的邮箱”</strong></p>
<p>*<em>git config –list *</em>            //用来查看配置结果</p>
<p>5.上传hexo</p>
<p>最后执行依次hexo clean，hexo g和hexo d,查看最后上传到网上的hexo。</p>
]]></content>
  </entry>
  <entry>
    <title>常见问题以及解决方法</title>
    <url>/2020/02/19/%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98%E4%BB%A5%E5%8F%8A%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<h5 id="在本地搭建Hexo博客时，我们会遇到各种各样的问题，本篇文章及说一些我在搭建博客时遇到的问题。"><a href="#在本地搭建Hexo博客时，我们会遇到各种各样的问题，本篇文章及说一些我在搭建博客时遇到的问题。" class="headerlink" title="在本地搭建Hexo博客时，我们会遇到各种各样的问题，本篇文章及说一些我在搭建博客时遇到的问题。"></a>在本地搭建Hexo博客时，我们会遇到各种各样的问题，本篇文章及说一些我在搭建博客时遇到的问题。</h5><h6 id="我想分成三个部分，方便对应老师的三个部分。http-www-yangkai123-top"><a href="#我想分成三个部分，方便对应老师的三个部分。http-www-yangkai123-top" class="headerlink" title="我想分成三个部分，方便对应老师的三个部分。http://www.yangkai123.top/"></a>我想分成三个部分，方便对应老师的三个部分。<a href="http://www.yangkai123.top/" target="_blank" rel="noopener">http://www.yangkai123.top/</a></h6><blockquote>
<p>Hexo博客的本地搭建<br>自己手动写博文<br>Hexo博客乔迁Github之旅  </p>
</blockquote>
<p><strong>一.Hexo博客的本地搭建</strong><br>  1.首先需要配置运行环境，即Node.js和Git的安装，再根据老师博客里的指令测试。我在安装完Hexo后，在cmd下使用了npm install hexo-cli -g指令看到了hexo-cil的版本号，我是个有强迫症的人，必须确定它是否安装好没，便在cmd输入hexo -v指令，然后我发现cmd并没有显示Hexo的各种版本信息，<img src="/assets/1.png" alt="img">那就是hexo没安装好了，我又安装一次，还是一样的结果。我又打开了Git Bash在窗口下输入hexo -v的指令，意外的它显示了版本信息，又正常了。<img src="/assets/2.png" alt="img"><br>  对比两张图，会发现前者有中文路径名，后者没有，所以问题出现在中文用户名这。</p>
<ul>
<li><p>我们需要改中文用户名，先鼠标右击开始处，选择运行，在对话框中搜索regedit(注册表编辑器)打开，我们可以将此路径（计算机\HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentVersion\ProfileList）粘贴到最上面，直接转入到我们需要改的文件，找到最长的子目录，一般为S-1-5-21开头的，把 ProfileImagePath 这个数据上的路径改成你的新名字。改完后注销用户，再登陆后你会发现变成了临时用户，在用户目录里把要改的用户文件夹改成新名字，注销后就可以正常登陆了。<br><strong><em>注</em></strong>：  </p>
</li>
<li><p>cmd入口在开始处右击，进入运行，搜索cmd回车就可以了。</p>
</li>
<li><p>md的意思是创建，新建。cd是进入XXX文件夹。  </p>
</li>
</ul>
<p>  <strong>二.自己手动写博文</strong><br>  1.设置编辑器路径时，新建scripts目录，和子文件auto_open.js。这个文件用记事本打开就好了。老师中博客给的是Windows端，Mac os端有点稍稍的不同，将”start”改成”open -a”即可。<br>  <strong>三.Hexo博客乔迁Github之旅</strong><br>    1.在新建仓库时，要注意勾选<img src="/assets/3.png" alt="img">，我开始建立两次，都没有出现我的网页地址，勾选了以后才出现，你们也可以试试不勾选可不可以，可能只有我一个人是这样。仓库没有地址时，可以选择在setting里，最底下，删除此仓库。<br>    2.我在最后一步hexo d部署时，屡次上传不成功，cmd也显示很多错误信息，原因在与本地和Github网站没连接成功。我采用的是ssh连接，可以参考这个网站配置ssh密钥。<a href="https://www.cnblogs.com/zwdeblog/p/9708503.html" target="_blank" rel="noopener">https://www.cnblogs.com/zwdeblog/p/9708503.html</a></p>
]]></content>
  </entry>
  <entry>
    <title>CYD</title>
    <url>/2020/02/19/CYD/</url>
    <content><![CDATA[<h1 id="Hi"><a href="#Hi" class="headerlink" title="Hi"></a>Hi</h1><h2 id="看到的都是小可爱"><a href="#看到的都是小可爱" class="headerlink" title="看到的都是小可爱"></a>看到的都是小可爱</h2><p>学习使我快乐<br>学习使我开心<br>加油！</p>
<p><img src="http://pics.sc.chinaz.com/files/pic/pic9/201503/apic10256.jpg" alt="img"></p>
<p><img src="/assets/CYD/apic10256.jpg" alt="img"></p>
]]></content>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2020/02/19/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>
]]></content>
  </entry>
</search>
